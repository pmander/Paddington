#!/bin/bash

#
# If the compiler output is overwhelmed with
#
# "Warning: variable Blah is unused",
#
# this script will produce another script as its output that will modify the
# offending files, adding a '_' prefix to those variable names that are
# unused. Usage example:
#
# make > ./log-file 2>&1
# ./support/fix-unused-var ./log-file > ./script
# source ./script
#
# Recompile the result to ensure that the changes are at least legal.
#
#


Last_File=''
Regexp=''
while read Position Message ;
do
  case "$Message" in
  'Warning: variable '*' is unused')
    Tmp="${Message#Warning: variable ?}" ;
    Var="${Tmp%? is unused}" ;
    File="${Position%:*:}" ;
    Tmp="${Position#*:}" ;
    Line="${Tmp%:}"
    if [ "${File}" == "${Last_File}" ] ;
    then
      Regexp="${Regexp}${Line}s/${Var}/_${Var}/;"
    else
      echo "${Last_File}" >&2 ;
      [ -f "${Last_File}" ] && echo "mv '${Last_File}' './tmp/tmp.erl' && sed '${Regexp%;}' < './tmp/tmp.erl' > '${Last_File}'"
      Last_File="${File}"
      Regexp="${Line}s/${Var}/_${Var}/;"
    fi
  esac ;
done < <(sed -n '/^lib[/]/p' | sort)
echo "${Last_File}" >&2 ;
[ -f "${Last_File}" ] && echo "mv '${Last_File}' './tmp/tmp.erl' && sed '${Regexp%;}' < './tmp/tmp.erl' > '${Last_File}'"
